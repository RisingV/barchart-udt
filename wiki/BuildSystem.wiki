#summary Build System

<wiki:toc />

= Introduction =

This project has 3 build systems:
  * Development CDT
  * Development NAR
  * Production NAR

each build system will produce artifacts with specific names and at specific locations which are arch and os dependent; barchart-udt native libarary loader will use the following search priority when looking for these artifacts:
  * Production NAR
  * Development CDT
  * Development NAR

you may want to delete specific artifact and/or location to force your java tests run only against the native artifacts you are interested in at the moment;

= Pre-Requisits =

== JDK ==
install both 32 and 64 bit java in separate folders;

do not include either java on the path;

== Ubuntu 10.10 ==

use 64 bit os

use [https://help.ubuntu.com/community/InstallingCompilers multi-libs]

sudo apt-get install gcc build-essential libc6-dev ia32-libs g++-multilib  libc6-dev-i386


== MacOSX 10.6.5 ==
use 64 bit os

use [http://developer.apple.com/technologies/tools/xcode.html xcode]

use [https://issues.sonatype.org/browse/NAR-177 java developer package]

== Windows 7 ==
use 64 bit os

use [http://tdm-gcc.tdragon.net/ tdm-gcc] (install in c:\mingw32 & c:\mingw64)

= Development CDT =

used for interactive development of both java and c++ code inside eclipse; allows to handle only single target platform at a time;

you must have eclipse cdt installed in your eclipse before you will be able to see cdt project configuration settings; 

you must also activate eclipse cdt perspective;

you must select your matching [http://wiki.eclipse.org/images/f/ff/New_cdtwsconfig_wsContextMenu.png build configuration] Project->Build Configurations->Set Active->cdt-{arch}-{os}-gpp

there are 6 cdt configs in this project (for each arch and os):
  * cdt_i386-Linux-gpp
  * cdt_amd64-Linux-gpp
  * cdt_i386-MacOSX-gpp
  * cdt_x86_64-MacOSX-gpp
  * cdt_x86-Windows-gpp
  * cdt_amd64-Windows-gpp

when cdt makes a build, you will see that a resource folder appears in you project with the same name as configuraton name; if you want cdt to re-build given configuration w/o "project clean" - just delete the resource folder;

you must select active build configuratin that matches your plaform arch and current java bitness;

you must have 2 named java jre defined in your eclipse: "java32" and "java64" (on macosx you must provide -d32/-d64 options to your java)

you must map one of these java jre to the "java se 1.6" in your eclipse;

you must have /usr/bin/bash or c:/cygwin/bin/bash available;

every time you update/save your java / c++ code in eclipse the following will happen:
  * java will get compiled and placed in target/classes
  * c++ will get compiled and placed in cdt-{arch}-{os}-gpp folder as well as into target/test-classes
  * console will show c++ build errors, if any;

double-click on the highlighted c++ console error will bring you back to the c++ source at the location of the error;

location of "development cdt" native libs:<br>
${project}/target/test-classes/

= Development NAR =

used for verification that maven-nar-plugin settings match to cdt settings; and that both cdt and nar produce identical libraries/artifacts;

there are numerous "maven launch configurations" provided for various maven-related tasks; study them and create your own;

for example:
  * "barchart-udt4_nar_macosx-32.m2e" will produce "development nar" libraries;
  * "barchart-udt4_test-macosx-32.m2e" will run all unit tests;

you must run appropriate version of m2e plugin in your eclipse;

you must have appropriate version on maven installed in
/opt/apache-maven-3.0.2

alternatively, you do not have to have eclipse to run these builds; you can run these maven builds from command line;

[http://code.google.com/p/barchart-udt/source/browse/trunk/barchart-udt4-parent/barchart-udt4/aol.properties current nar settings]

location of "development nar" native libs (example):<br>
${project}/target/test-classes/barchart-udt4-1.0.3-SNAPSHOT-i386-Linux-gpp-jni/lib/i386-Linux-gpp/jni

= Production NAR =

used for multi-platform hudson build with maven-nar-plugin 

the process involves brining up all target platforms, building libraries, running unit tests, integration tests and uploading jars and nars to the snapshot repo;